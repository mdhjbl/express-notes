1.at fisrt for working with express we should download the express module with this command(npm i express )

rout param :
we call the part of link after the constant that changes for each page (Rout param)

type of sending resposnse :
res.send()
res.end()
res.json()
without express when we want to send the resposnse we should set the constent-type but with express
we dont need this 
but whats the difference between them ? the .end() is not very common and most of the time we use .send()
and about .json() it always it the json pattern.

CRUD : create(post) , read(delete) , update(put) , delete(delete) 

Receiving multiple route parameters in an API:
In an API, you can define routes that accept multiple parameters by specifying them in the URL path with
a colon (:) before each parameter name. These parameters can then be accessed in your request handler via
req.params.

To receive the request body in the back-end, we use (req.body) and print it to the console.
But if we don't include the following middleware, req.body will be undefined:
Way 1: app.use(express.json()) → for handling JSON data
Way 2: app.use(express.urlencoded()) → if the data is not in JSON format
Notice: To access specific values from the request body (e.g., id), use: req.body.id

body parser package:
The body-parser package was commonly used in older Express projects to handle request bodies.
However, in newer versions of Express (4.16 and above), its functionality is already built-in
using express.json() and express.urlencoded(), so you no longer need to install body-parser 
separately unless you have specific needs.

Connect to database with Mongoose:
In a project that uses Express, you can use Mongoose to connect to a MongoDB database.
First, install Mongoose with this command : npm i mongoose
Then, create a folder called configs and inside it, make a file named db.js.
Write the database connection code in db.js.
After that, in your main file (like app.js), just require the db.js file 
this will connect your app to the database.

Creating Model:
In the database, we create one model for each collection. That means every collection has its
own model connected to it.
Mongoose helps us create models easily with a lot of useful features.
We define a schema (or pattern) for the properties of each model. This schema tells Mongoose
what kind of data to expect in each document of that collection.
Create a folder named models, and inside that, make a separate file for each collection.

req.body validation with fastest-validator
With this package and similar ones, we can validate the request body easily and quickly.
For any object that is based on JavaScript, we can use this package.
We create a validator folder, and inside it, we create a .js file for each object that needs
a validator.

Before the id is used to query the database, it should be validated to ensure it's a valid 
MongoDB ObjectId. Otherwise,the backend may crash or throw an error during the database operation.

What is Middleware?
Middleware is a function that comes between the request and the response in a web server 
It can modify the request or response, run code, end the request, or pass control to the 
next middleware.
Think of it as a pipeline through which every HTTP request flows.

the difference between global and local Middleware : Global middleware is applied to all routes
in the application,while local middleware is applied to specific routes only.

